{{- if .Values.k8sCollector.enabled }}
# The Flowmill k8s collector consists of two services:
# 1) k8s-watcher: talks to the Kubernetes API server to determine the current state of
#    the cluster; sets up watches to be notified of subsequent changes to pods, services
#    and other resources.
# 2) k8s-relay: relays the information collected by k8s-watcher to the Flowmill service.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flowmill-k8s-collector.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "flowmill-k8s-collector.fullname" . }}
    helm.sh/chart: {{ include "flowmill.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "flowmill-k8s-collector.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # This is here to allow us to do "zero-downtime" updates without an image change.
        rollingUpdateVersion: "1"
        charts.flowmill.com/version: {{ .Chart.Version }}
      labels:
        app.kubernetes.io/name: {{ include "flowmill-k8s-collector.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - image: "{{ .Values.images.repository }}/{{ .Values.k8sCollector.watcher.imageName}}:{{ default .Values.flowmill.version .Values.k8sCollector.watcher.tag }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        name: flowmill-k8s-watcher
{{- if hasKey .Values.k8sCollector.watcher "resources" }}
        resources:
{{ toYaml .Values.k8sCollector.watcher.resources | indent 10 }}
{{- end }}
      # k8s-relay, which is a service that the k8s collector talks to.
      # Currently not configurable, has to be reachable on localhost:8172, so must
      # share a pod with the k8s collector above.  Talks in turn to flowmill-server
      # on our end.
      - image: "{{ .Values.images.repository }}/{{ .Values.k8sCollector.relay.imageName }}:{{ default .Values.flowmill.version .Values.k8sCollector.relay.tag }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        name: flowmill-k8s-relay
{{- if hasKey .Values.k8sCollector.relay "resources" }}
        resources:
{{ toYaml .Values.k8sCollector.relay.resources | indent 10 }}
{{- end }}
        args:
          - --config-file
          - /etc/flowmill/config.yaml
{{- if .Values.log.console }}
          - --log-console
{{- end }}
{{- if hasKey .Values.log "level" }}
          - --{{ .Values.log.level }}
{{- end }}
{{- if hasKey .Values.k8sCollector.relay "log" -}}
{{- if hasKey .Values.k8sCollector.relay.log "whitelist" }}
{{- if hasKey .Values.k8sCollector.relay.log.whitelist "channel" }}
          - --log-whitelist-channel={{ .Values.k8sCollector.relay.log.whitelist.channel }}
{{- end }}
{{- if hasKey .Values.k8sCollector.relay.log.whitelist "component" }}
          - --log-whitelist-component={{ .Values.k8sCollector.relay.log.whitelist.component }}
{{- end }}
{{- if hasKey .Values.k8sCollector.relay.log.whitelist "cloudPlatform" }}
          - --log-whitelist-cloud-platform={{ .Values.k8sCollector.relay.log.whitelist.cloudPlatform }}
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.k8sCollector.relay.additionalArgs }}
{{ toYaml .Values.k8sCollector.relay.additionalArgs | indent 10 }}
{{- end }}
        env:
          - name: "FLOWMILL_CLUSTER_NAME"
            value: {{ quote .Values.flowmill.clusterName }}
{{- if hasKey .Values.flowmill "debug" }}
{{- if (default false .Values.flowmill.debug.enabled) }}
          - name: "FLOWMILL_DEBUG_MODE"
            value: "true"
{{- end }}
{{- end }}
{{- if (default false .Values.k8sCollector.relay.runUnderGDB) }}
          - name: "FLOWMILL_RUN_UNDER_GDB"
            value: "gdb"
{{- end }}
{{- if hasKey .Values.auth "chamberService" }}
          - name: "CHAMBER_SERVICE_NAME"
            value: {{ quote .Values.auth.chamberService }}
{{- else }}
          - name: "FLOWMILL_AUTH_KEY_ID"
            valueFrom:
              secretKeyRef:
                key: flowmill_agent_key_id
              {{- if .Values.auth.existingSecret }}
                name: {{ .Values.auth.existingSecret }}
              {{- else }}
                name: {{ template "flowmill.fullname" . }}-agent-key
              {{- end }}
          - name: "FLOWMILL_AUTH_SECRET"
            valueFrom:
              secretKeyRef:
                key: flowmill_agent_secret
              {{- if .Values.auth.existingSecret }}
                name: {{ .Values.auth.existingSecret }}
              {{- else }}
                name: {{ template "flowmill.fullname" . }}-agent-key
              {{- end }}
{{- end }}
          - name: "FLOWMILL_AUTHZ_SERVER"
            value: {{ default "app.flowmill.com" .Values.flowmill.services.host }}
          - name: "FLOWMILL_CRASH_COLLECTOR_HOST"
            value: {{ default "app.flowmill.com" .Values.flowmill.services.host }}
          - name: "FLOWMILL_INTAKE_HOST"
            value: {{ default "intake.flowmill.com" .Values.flowmill.intake.host }}
          - name: "FLOWMILL_INTAKE_PORT"
            value: "{{ default 443 .Values.flowmill.intake.port }}"
{{- if hasKey .Values.flowmill.intake "nameOverride" }}
          - name: "FLOWMILL_INTAKE_NAME"
            value: {{ .Values.flowmill.intake.nameOverride }}
{{- end }}
{{- if hasKey .Values.flowmill "debug" }}
{{- if (default false .Values.flowmill.debug.storeMinidump) }}
          - name: "FLOWMILL_MINIDUMP_DIR"
            value: "/var/run/flowmill/host/run/flowmill/minidump"
{{- end }}
{{- end }}
{{- if .Values.proxy.enabled }}
          - name: "FLOWMILL_PROXY_HOST"
            value: {{.Values.proxy.host | quote}}
          - name: "FLOWMILL_PROXY_PORT"
            value: {{.Values.proxy.port | quote}}
          - name: "HTTP_PROXY"
            value: "http://{{ .Values.proxy.host }}:{{ .Values.proxy.port }}"
          - name: "HTTPS_PROXY"
            value: "http://{{ .Values.proxy.host }}:{{ .Values.proxy.port }}"
          - name: "http_proxy"
            value: "http://{{ .Values.proxy.host }}:{{ .Values.proxy.port }}"
          - name: "https_proxy"
            value: "http://{{ .Values.proxy.host }}:{{ .Values.proxy.port }}"
{{- if hasKey .Values.proxy "basic_auth" }}
          - name: "FLOWMILL_PROXY_BASIC_AUTH"
            value: {{.Values.proxy.basicAuth | quote}}
{{- end }}
{{- end }}
{{- if .Values.k8sCollector.relay.env }}
{{ toYaml .Values.k8sCollector.relay.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/flowmill
          name: flowmill-k8s-relay-config
{{- if hasKey .Values.flowmill "debug" }}
{{- if (default false .Values.flowmill.debug.storeMinidump) }}
        - mountPath: /var/run/flowmill/host/run/flowmill
          name: host-var-run-flowmill
          readOnly: false
{{- end }}
{{- end }}
      terminationGracePeriodSeconds: 30
      volumes:
{{- if hasKey .Values.flowmill "debug" }}
{{- if (default false .Values.flowmill.debug.storeMinidump) }}
      - name: host-var-run-flowmill
        hostPath:
          path: /var/run/flowmill
          type: DirectoryOrCreate
{{- end }}
{{- end }}
      - name: flowmill-k8s-relay-config
        projected:
          sources:
            - configMap:
                name: {{ include "flowmill.fullname" . }}-config
                items:
                - key: config.yaml
                  path: config.yaml
      securityContext: {}
      {{- if .Values.rbac.create }}
      serviceAccount: {{ include "flowmill-k8s-collector.fullname" . }}
      serviceAccountName: {{ include "flowmill-k8s-collector.fullname" . }}
      {{- end }}
    {{- with .Values.k8sCollector.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8}}
    {{- end }}
    {{- with .Values.k8sCollector.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.k8sCollector.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}      
    {{- end }}
{{- end }}
